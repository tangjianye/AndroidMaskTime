apply plugin: 'com.android.application'

// 版本发布名字
def releaseName = 'masktime'

// 版本发布时间
def releaseTime = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))

// 版本发布版本号
def releaseCode = new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.peach.masktime"
        minSdkVersion 15
        targetSdkVersion 21
        // versionCode Integer.valueOf(releaseCode)
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [CHANNEL_VALUE: "default"]
    }

    productFlavors {
        "default" {}
        baidu {}
        "360" {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }

    signingConfigs {
        release {
            storeFile file('E:/appKey/keyStore.jks')
            storePassword 'tztt0746'
            keyAlias 'key'
            keyPassword 'tztt0731'
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            // signingConfig signingConfigs.release
        }
    }

    // Rename APP
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def name = releaseName + '-' + variant.productFlavors[0].name
            def version = 'V' + defaultConfig.versionName
            def oldFile = output.outputFile

            if (variant.buildType.name.equals('release')) {
                // println(variant.productFlavors[0].name)
                def releaseApkName = name + '-release' + '.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }

            if (variant.buildType.name.equals('debug')) {
                // def releaseApkName = name + '-' + version + '-' + releaseTime + '-debug' + '.apk'
                def releaseApkName = name + '-' + version + '-debug' + '.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
        }
    }

    // Something wrong with the http* libs
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    // Start emulator with x86 Accelerated (HAXM)
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'armeabi-v7a'
//            universalApk true
//        }
//    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile project(':volley')
    compile files('libs/gson-2.2.4.jar')
    compile files('httpmime-4.3.jar')
    compile files('httpclient-android-4.3.5.1.jar')
}
